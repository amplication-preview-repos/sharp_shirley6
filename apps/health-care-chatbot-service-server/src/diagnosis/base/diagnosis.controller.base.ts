/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiagnosisService } from "../diagnosis.service";
import { DiagnosisCreateInput } from "./DiagnosisCreateInput";
import { Diagnosis } from "./Diagnosis";
import { DiagnosisFindManyArgs } from "./DiagnosisFindManyArgs";
import { DiagnosisWhereUniqueInput } from "./DiagnosisWhereUniqueInput";
import { DiagnosisUpdateInput } from "./DiagnosisUpdateInput";

export class DiagnosisControllerBase {
  constructor(protected readonly service: DiagnosisService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Diagnosis })
  async createDiagnosis(
    @common.Body() data: DiagnosisCreateInput
  ): Promise<Diagnosis> {
    return await this.service.createDiagnosis({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Diagnosis] })
  @ApiNestedQuery(DiagnosisFindManyArgs)
  async diagnoses(@common.Req() request: Request): Promise<Diagnosis[]> {
    const args = plainToClass(DiagnosisFindManyArgs, request.query);
    return this.service.diagnoses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Diagnosis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async diagnosis(
    @common.Param() params: DiagnosisWhereUniqueInput
  ): Promise<Diagnosis | null> {
    const result = await this.service.diagnosis({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Diagnosis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiagnosis(
    @common.Param() params: DiagnosisWhereUniqueInput,
    @common.Body() data: DiagnosisUpdateInput
  ): Promise<Diagnosis | null> {
    try {
      return await this.service.updateDiagnosis({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Diagnosis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiagnosis(
    @common.Param() params: DiagnosisWhereUniqueInput
  ): Promise<Diagnosis | null> {
    try {
      return await this.service.deleteDiagnosis({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
