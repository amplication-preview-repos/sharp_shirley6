/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiseaseService } from "../disease.service";
import { DiseaseCreateInput } from "./DiseaseCreateInput";
import { Disease } from "./Disease";
import { DiseaseFindManyArgs } from "./DiseaseFindManyArgs";
import { DiseaseWhereUniqueInput } from "./DiseaseWhereUniqueInput";
import { DiseaseUpdateInput } from "./DiseaseUpdateInput";

export class DiseaseControllerBase {
  constructor(protected readonly service: DiseaseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Disease })
  async createDisease(
    @common.Body() data: DiseaseCreateInput
  ): Promise<Disease> {
    return await this.service.createDisease({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Disease] })
  @ApiNestedQuery(DiseaseFindManyArgs)
  async diseases(@common.Req() request: Request): Promise<Disease[]> {
    const args = plainToClass(DiseaseFindManyArgs, request.query);
    return this.service.diseases({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Disease })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async disease(
    @common.Param() params: DiseaseWhereUniqueInput
  ): Promise<Disease | null> {
    const result = await this.service.disease({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Disease })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDisease(
    @common.Param() params: DiseaseWhereUniqueInput,
    @common.Body() data: DiseaseUpdateInput
  ): Promise<Disease | null> {
    try {
      return await this.service.updateDisease({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Disease })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDisease(
    @common.Param() params: DiseaseWhereUniqueInput
  ): Promise<Disease | null> {
    try {
      return await this.service.deleteDisease({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
