/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Symptom as PrismaSymptom } from "@prisma/client";

export class SymptomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SymptomCountArgs, "select">): Promise<number> {
    return this.prisma.symptom.count(args);
  }

  async symptoms(args: Prisma.SymptomFindManyArgs): Promise<PrismaSymptom[]> {
    return this.prisma.symptom.findMany(args);
  }
  async symptom(
    args: Prisma.SymptomFindUniqueArgs
  ): Promise<PrismaSymptom | null> {
    return this.prisma.symptom.findUnique(args);
  }
  async createSymptom(args: Prisma.SymptomCreateArgs): Promise<PrismaSymptom> {
    return this.prisma.symptom.create(args);
  }
  async updateSymptom(args: Prisma.SymptomUpdateArgs): Promise<PrismaSymptom> {
    return this.prisma.symptom.update(args);
  }
  async deleteSymptom(args: Prisma.SymptomDeleteArgs): Promise<PrismaSymptom> {
    return this.prisma.symptom.delete(args);
  }
}
